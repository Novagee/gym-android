package com.jianyue.main.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.util.List;

import org.apache.http.entity.mime.HttpMultipartMode;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.fireking.app.imagelib.entity.ImageBean;
import org.fireking.app.imagelib.tools.Config;
import org.fireking.app.imagelib.widget.PicSelectActivity;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.Toast;

import com.jianyue.DataTask.EditProfileDataTask;
import com.jianyue.utils.ClassAPIResponse;
import com.jianyue.utils.ClassUserDetail;
import com.jianyue.utils.GlobalData;
import com.jianyue.utils.Internet_Check;
import com.jianyue.utils.SessionManager;
import com.jianyue.utils.StaticMethodsUtility;
import com.jianyue.webservices.WebElements;

public class TakePictureActivity extends Activity
{
	private CameraPreview mPreview;
	private FLASH_MODE flash_mode = FLASH_MODE.AUTO;
	private ImageView ivCamaraBtn ,ivClose;
	
	private ImageView ivTutorialBg , ivGotIt , ivTakePicTop , ivTakePicBottom;

	public static Activity activity;
	
	private String Nickname , Gender;
	private boolean is_first_time = false;
	
	private String height , width;
	
	private boolean enable_click = true;

	private boolean initFirst = true;
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setVolumeControlStream(AudioManager.STREAM_MUSIC);
		setContentView(R.layout.take_screenshot);
		Bundle bundle = getIntent().getExtras();
		if(bundle != null)
		{
			is_first_time = bundle.getBoolean("is_first_time");
			if(is_first_time)
			{
				Nickname = bundle.getString("Nickname");
				Gender = bundle.getString("Gender");
			}
		}
		activity = this;
		initObjects();
	}

	private void initObjects()
	{
		ivClose = (ImageView)findViewById(R.id.ivClose);
		ivTutorialBg = (ImageView)findViewById(R.id.ivTutorialBg);
		ivGotIt = (ImageView)findViewById(R.id.ivGotIt);
		ivTakePicTop = (ImageView)findViewById(R.id.ivTakePicTop);
		ivTakePicBottom = (ImageView)findViewById(R.id.ivTakePicBottom);
		ivTutorialBg.setOnClickListener(onTutorialClick);
		ivGotIt.setOnClickListener(onTutorialClick);
		ivTakePicTop.setOnClickListener(onTutorialClick);
		ivTakePicBottom.setOnClickListener(onTutorialClick);
		if(is_first_time)
		{
			ivClose.setVisibility(View.GONE);
			if(!SessionManager.getTakePicTuorial(TakePictureActivity.this))
			{
				enable_click = false;
				ivTutorialBg.setVisibility(View.VISIBLE);
				ivGotIt.setVisibility(View.VISIBLE);
				ivTakePicTop.setVisibility(View.VISIBLE);
				ivTakePicBottom.setVisibility(View.VISIBLE);
			}
		}
		else
		{
			HideTutorial();
		}
		ivClose.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				backManage();
			}
		});
		ivCamaraBtn = (ImageView) findViewById(R.id.ivCamaraBtn);
		ivCamaraBtn.setOnTouchListener(new OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				switch (event.getAction()) {
			    case MotionEvent.ACTION_DOWN:
			    	Intent intent = new Intent(TakePictureActivity.this,
			    			PicSelectActivity.class);
			    	Config.setLimit(1);
			    	startActivityForResult(intent, 0x123);
			    	/*
			    	if (mPreview == null && enable_click)
					{
						mPreview = new CameraPreview(TakePictureActivity.this, flash_mode);
						FrameLayout preview = (FrameLayout) findViewById(R.id.flCameraPreview);
						preview.removeAllViews();
						preview.addView(mPreview);
						if (!mPreview.isCameraLoad())
						{
							Toast.makeText(TakePictureActivity.this, "Can't load camera!", Toast.LENGTH_SHORT).show();
							backManage();
						}
						initFirst = true;
					}else{
						initFirst = false;
					}*/
			    	break;
			    case MotionEvent.ACTION_MOVE:
			    	break;
			    case MotionEvent.ACTION_UP:
			    	if(enable_click && initFirst ==false)
			    	{
				    	if (mPreview == null)
						{
							mPreview = new CameraPreview(TakePictureActivity.this, flash_mode);
							FrameLayout preview = (FrameLayout) findViewById(R.id.flCameraPreview);
							preview.removeAllViews();
							preview.addView(mPreview);
							if (!mPreview.isCameraLoad())
							{
								Toast.makeText(TakePictureActivity.this, "Can't load camera!", Toast.LENGTH_SHORT).show();
								backManage();
							}
						}
			    	takePicture();
			    	}
			    	break;
				}
				return true;
			}
		});
	}

	@Override
	protected void onResume()
	{
		super.onResume();
	}

	@Override
	protected void onPause()
	{
		super.onPause();
		if (mPreview != null)
		{
			mPreview.onPause();
			mPreview = null;
		}
		ivCamaraBtn.setEnabled(false);
	}

	private void takePicture()
	{
		Log.i("log_tag", "takePicture");
		mPreview.takePicture(null, null, photoCallback);
	}
	
	private OnClickListener onTutorialClick = new OnClickListener() {
		
		@Override
		public void onClick(View v) {
			SessionManager.setTakePicTutorial(TakePictureActivity.this, true);
			HideTutorial();
		}
	};

	private Camera.PictureCallback photoCallback = new Camera.PictureCallback()
	{
		public void onPictureTaken(final byte[] data, final Camera camera)
		{
			DisplayMetrics dm = new DisplayMetrics();
			getWindowManager().getDefaultDisplay().getMetrics(dm);
			GlobalData.bmp = null;
			GlobalData.bmp = (mPreview.getBitmapFromBuffer(data, dm.widthPixels, dm.heightPixels));
			GlobalData.sd_path = getFilePathFromSDCARD(GlobalData.bmp);
			//Toast.makeText(TakePictureActivity.this, GlobalData.sd_path, Toast.LENGTH_LONG).show();
//			if(GlobalData.bmp != null)
//			{
//				MainActivity.is_Add = true;
//			}
			if(is_first_time)
			{
				backManage();
			}
			else
			{
				requestEditProfileWebservice();
			}
		}
	};

	private void backManage()
	{
		if(is_first_time)
		{
			Log.d("log_tag", "Profile Image : "+GlobalData.sd_path + "");
			finish();
			Intent i = new Intent(TakePictureActivity.this , SettingActivity.class);
			i.putExtra("Nickname", Nickname);
			i.putExtra("Gender", "M");
			startActivity(i);
		}
		else
		{
			finish();
			overridePendingTransition(R.anim.slide_down , R.anim.slide_down_out);
		}
	}

	@Override
	public void onBackPressed()
	{
		finish();
	}
	
	public String getFilePathFromSDCARD(Bitmap image) {
		File folder = null;
		if (Environment.getExternalStorageState().equals(
				Environment.MEDIA_MOUNTED)) {
			folder = new File(
					Environment.getExternalStorageDirectory(), "/Demo/");
			if (!folder.isDirectory()) {
				folder.mkdir();
			}
		} else {
			folder = getDir("Demo", Context.MODE_WORLD_READABLE);
		}
		SharedPreferences pref = PreferenceManager.getDefaultSharedPreferences(TakePictureActivity.this);
		int image_no = pref.getInt("Image_No", 1);
		String fname = "Demo_" + image_no + ".png";
		File myDir = new File(folder.toString());
		image_no++;
		Editor edit = pref.edit();
		edit.putInt("Image_No", image_no);
		edit.commit();
		File file = new File(myDir, fname);
		if (file.exists())
			file.delete();
		try {
			FileOutputStream out = new FileOutputStream(file);
			image.compress(Bitmap.CompressFormat.PNG, 90, out);
			out.flush();
			out.close();

		} catch (Exception e) {
			e.printStackTrace();
		}

		/*String fileName = "temp.jpg";
		File f = new File(Environment.getExternalStorageDirectory(),
				"/saved_images");
		f = new File(f, fileName);*/

		return file.getAbsolutePath();
	}
	
	private void requestEditProfileWebservice() {

		final ClassAPIResponse apiResponse = new ClassAPIResponse();

		EditProfileDataTask task = new EditProfileDataTask(TakePictureActivity.this,
				apiResponse , "r/user/profile/edit",  false ) {
			@Override
			protected void onPostExecute(String result) {
				super.onPostExecute(result);

				if (result.equals(GlobalData.FAIL)) {
					if (!Internet_Check
							.checkInternetConnection(TakePictureActivity.this)) {
						StaticMethodsUtility.showNegativeToast(
								TakePictureActivity.this,
								getResources().getString(R.string.no_internet));
					}
					return;
				}
				
				if(apiResponse.ack.equalsIgnoreCase("Success"))
				{
					//finish();
				}
				
			}
		};

		if (Internet_Check.checkInternetConnection(TakePictureActivity.this)) {
			try {

				MultipartEntity reqEntity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);
				try {
					
					ClassUserDetail obj = SessionManager.getObject(TakePictureActivity.this);
					if(GlobalData.bmp != null)
					{
						width = String.valueOf(GlobalData.bmp.getWidth());
						height = String.valueOf(GlobalData.bmp.getHeight());
					}
					reqEntity.addPart(WebElements.SIGNUP.UUID,
							new StringBody(SessionManager.getUUID(TakePictureActivity.this)));
					reqEntity.addPart(WebElements.SIGNUP.GENDER,
							new StringBody(obj.gender));
					reqEntity.addPart(WebElements.SIGNUP.INTERESTIN,
							new StringBody(obj.interestIn));
					Log.d("LATLONG", "Location  "+SessionManager.getLatitude(TakePictureActivity.this) + "  " + SessionManager.getLongitude(TakePictureActivity.this));
					if(SessionManager.getLatitude(TakePictureActivity.this).equalsIgnoreCase(""))
					{
						reqEntity.addPart(WebElements.SIGNUP.LAT,
								new StringBody("22.959991"));
						reqEntity.addPart(WebElements.SIGNUP.LNG,
								new StringBody("72.909516"));
					}
					else
					{
						reqEntity.addPart(WebElements.SIGNUP.LAT,
								new StringBody(SessionManager.getLatitude(TakePictureActivity.this)));
						reqEntity.addPart(WebElements.SIGNUP.LNG,
								new StringBody(SessionManager.getLongitude(TakePictureActivity.this)));
					}
//					reqEntity.addPart(WebElements.SIGNUP.DEVICETOKEN,
//							new StringBody(""));
					reqEntity.addPart(WebElements.SIGNUP.HEIGHT,
							new StringBody(height));
					reqEntity.addPart(WebElements.SIGNUP.WIDTH,
							new StringBody(width));
					reqEntity.addPart(WebElements.SIGNUP.PIC ,
							new FileBody((new File(GlobalData.sd_path))));
					task.execute(reqEntity);
					backManage();
				} catch (Exception e) {

				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			StaticMethodsUtility.showNegativeToast(TakePictureActivity.this,
					getResources().getString(R.string.no_internet));
		}
	}
	
	private void HideTutorial()
	{
		enable_click = true;
		ivTutorialBg.setVisibility(View.GONE);
		ivGotIt.setVisibility(View.GONE);
		ivTakePicTop.setVisibility(View.GONE);
		ivTakePicBottom.setVisibility(View.GONE);
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		if (requestCode == 0x123 && resultCode == RESULT_OK) {
			Intent intent = data;
			List<ImageBean> images = (List<ImageBean>) intent.getSerializableExtra("images");
			if(images.size() > 0){
				GlobalData.bmp = null;
				GlobalData.bmp = BitmapFactory.decodeFile(images.get(0).path) ;
				GlobalData.sd_path = images.get(0).path;
			}
			for (ImageBean b : images) {
				System.out.println("<><<><> ???" + b.toString());
			}
		}
		super.onActivityResult(requestCode, resultCode, data);
	}
}
